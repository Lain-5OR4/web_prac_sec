import React, { useState } from 'react';

const VulnerabilityDemo: React.FC = () => {
  const [weakPassword, setWeakPassword] = useState('');
  const [weakPasswordResult, setWeakPasswordResult] = useState('');
  const [bruteForceResult, setBruteForceResult] = useState('');
  const [bruteForceLog, setBruteForceLog] = useState<string[]>([]);
  const [sessionId, setSessionId] = useState('');
  const [hijackResult, setHijackResult] = useState('');
  const [isAttacking, setIsAttacking] = useState(false);

  const testWeakPassword = async () => {
    try {
      const response = await fetch('http://localhost:3000/api/demo/weak-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ password: weakPassword }),
      });

      const data = await response.json();
      setWeakPasswordResult(data.message);
    } catch (error) {
      setWeakPasswordResult('ネットワークエラーが発生しました');
    }
  };

  const startBruteForceAttack = async () => {
    setIsAttacking(true);
    setBruteForceLog([]);
    setBruteForceResult('');

    const commonPasswords = [
      '123456', 'password', 'admin', '1234', 'qwerty',
      'letmein', 'welcome', '0000', 'monkey', 'dragon'
    ];

    const log: string[] = [];
    
    for (let i = 0; i < commonPasswords.length; i++) {
      const password = commonPasswords[i];
      const logEntry = `試行 ${i + 1}: パスワード "${password}" を試行中...`;
      log.push(logEntry);
      setBruteForceLog([...log]);

      // 実際のリクエストをシミュレート
      await new Promise(resolve => setTimeout(resolve, 500));

      if (password === '1234') {
        const successEntry = `🚨 成功! パスワード "${password}" でログインに成功しました！`;
        log.push(successEntry);
        setBruteForceLog([...log]);
        setBruteForceResult(
          `ブルートフォース攻撃成功！${i + 1}回の試行でパスワードが破られました。`
        );
        break;
      } else {
        const failEntry = `❌ 失敗: パスワード "${password}" は正しくありません。`;
        log.push(failEntry);
        setBruteForceLog([...log]);
      }
    }

    setIsAttacking(false);
  };

  const testSessionHijack = () => {
    if (sessionId === 'ABC123XYZ') {
      setHijackResult(
        '🚨 セッションハイジャック成功！攻撃者が正当なユーザーになりすましています。'
      );
    } else if (sessionId.trim()) {
      setHijackResult(
        '❌ 無効なセッションIDです。正当なセッションID "ABC123XYZ" を試してください。'
      );
    } else {
      setHijackResult('セッションIDを入力してください。');
    }
  };

  return (
    <div className="auth-demo">
      <h2>セキュリティ脆弱性のデモ</h2>
      
      <div className="demo-explanation vulnerability-warning">
        <p>
          <strong>⚠️ 警告:</strong> 以下は教育目的のみのデモンストレーションです。
          実際のシステムに対してこれらの攻撃を行うことは違法行為となる可能性があります。
        </p>
      </div>

      {/* 弱いパスワードデモ */}
      <div className="vulnerability-section">
        <h3>1. 弱いパスワードの脆弱性</h3>
        <div className="vulnerability-demo">
          <p>
            推測しやすいパスワードは簡単に破られてしまいます。
            以下のフォームで一般的な弱いパスワードを試してみてください。
          </p>
          
          <div className="demo-form">
            <div className="form-group">
              <label htmlFor="weak-password">パスワードを推測してみてください:</label>
              <input
                type="password"
                id="weak-password"
                value={weakPassword}
                onChange={(e) => setWeakPassword(e.target.value)}
                placeholder="ヒント: よく使われる4桁の数字"
              />
              <small>よくあるパスワード: 1234, 0000, admin, password など</small>
            </div>
            
            <button onClick={testWeakPassword} disabled={!weakPassword}>
              パスワードをテスト
            </button>
          </div>

          {weakPasswordResult && (
            <div className={`result-panel ${weakPasswordResult.includes('脆弱') ? 'error' : 'success'}`}>
              {weakPasswordResult}
            </div>
          )}

          <div className="countermeasures">
            <h4>対策:</h4>
            <ul>
              <li>最低8文字以上の長さ</li>
              <li>大文字・小文字・数字・特殊文字を組み合わせる</li>
              <li>辞書にある単語を避ける</li>
              <li>個人情報（生年月日など）を使わない</li>
              <li>定期的なパスワード変更</li>
            </ul>
          </div>
        </div>
      </div>

      {/* ブルートフォース攻撃デモ */}
      <div className="vulnerability-section">
        <h3>2. ブルートフォース攻撃</h3>
        <div className="vulnerability-demo">
          <p>
            システムに対して総当たりでパスワードを試行する攻撃です。
            弱いパスワードは短時間で破られてしまいます。
          </p>
          
          <button 
            onClick={startBruteForceAttack} 
            disabled={isAttacking}
            className="attack-button"
          >
            {isAttacking ? '攻撃実行中...' : 'ブルートフォース攻撃を開始'}
          </button>

          {bruteForceLog.length > 0 && (
            <div className="attack-log">
              <h4>攻撃ログ:</h4>
              <div className="log-content">
                {bruteForceLog.map((entry, index) => (
                  <div key={index} className={`log-entry ${entry.includes('成功') ? 'success' : entry.includes('失敗') ? 'failure' : ''}`}>
                    {entry}
                  </div>
                ))}
              </div>
            </div>
          )}

          {bruteForceResult && (
            <div className="result-panel error">
              {bruteForceResult}
            </div>
          )}

          <div className="countermeasures">
            <h4>対策:</h4>
            <ul>
              <li>レート制限（試行回数の制限）</li>
              <li>アカウントロックアウト機能</li>
              <li>CAPTCHA認証</li>
              <li>多要素認証（2FA）</li>
              <li>ログ監視と異常検知</li>
            </ul>
          </div>
        </div>
      </div>

      {/* セッションハイジャックデモ */}
      <div className="vulnerability-section">
        <h3>3. セッションハイジャック</h3>
        <div className="vulnerability-demo">
          <p>
            攻撃者が正当なユーザーのセッションIDを盗んで、
            そのユーザーになりすます攻撃です。
          </p>
          
          <div className="hijack-demo">
            <div className="legitimate-user">
              <h4>正当なユーザーのセッション:</h4>
              <div className="session-display">
                セッションID: ABC123XYZ
              </div>
            </div>

            <div className="attacker-section">
              <h4>攻撃者がセッションIDを盗用:</h4>
              <div className="form-group">
                <input
                  type="text"
                  value={sessionId}
                  onChange={(e) => setSessionId(e.target.value)}
                  placeholder="セッションIDを入力してください"
                />
                <button onClick={testSessionHijack}>
                  なりすまし実行
                </button>
              </div>
            </div>
          </div>

          {hijackResult && (
            <div className={`result-panel ${hijackResult.includes('成功') ? 'error' : 'warning'}`}>
              {hijackResult}
            </div>
          )}

          <div className="countermeasures">
            <h4>対策:</h4>
            <ul>
              <li>HTTPSの必須使用</li>
              <li>HTTPOnly Cookie属性</li>
              <li>Secure Cookie属性</li>
              <li>SameSite Cookie属性</li>
              <li>セッションIDの定期更新</li>
              <li>IPアドレスの検証</li>
            </ul>
          </div>
        </div>
      </div>

      {/* その他の脆弱性の説明 */}
      <div className="vulnerability-section">
        <h3>4. その他の重要な脆弱性</h3>
        
        <div className="other-vulnerabilities">
          <div className="vulnerability-item">
            <h4>CSRF（Cross-Site Request Forgery）</h4>
            <p>
              悪意のあるサイトから、ユーザーが意図しない操作を実行させる攻撃。
            </p>
            <div className="mini-countermeasures">
              <strong>対策:</strong> CSRFトークン、SameSite Cookie
            </div>
          </div>

          <div className="vulnerability-item">
            <h4>XSS（Cross-Site Scripting）</h4>
            <p>
              Webページに悪意のあるスクリプトを埋め込んで実行させる攻撃。
            </p>
            <div className="mini-countermeasures">
              <strong>対策:</strong> 入力値検証、出力エスケープ、CSP
            </div>
          </div>

          <div className="vulnerability-item">
            <h4>SQLインジェクション</h4>
            <p>
              入力フィールドにSQL文を注入してデータベースを不正操作する攻撃。
            </p>
            <div className="mini-countermeasures">
              <strong>対策:</strong> プリペアドステートメント、入力値検証
            </div>
          </div>

          <div className="vulnerability-item">
            <h4>中間者攻撃（Man-in-the-Middle）</h4>
            <p>
              通信経路上で攻撃者が通信内容を盗聴・改ざんする攻撃。
            </p>
            <div className="mini-countermeasures">
              <strong>対策:</strong> HTTPS/TLS、証明書検証
            </div>
          </div>
        </div>
      </div>

      <div className="security-best-practices">
        <h3>セキュリティベストプラクティス</h3>
        <div className="best-practices-grid">
          <div className="practice-category">
            <h4>認証</h4>
            <ul>
              <li>強力なパスワードポリシー</li>
              <li>多要素認証（MFA）</li>
              <li>適切なセッション管理</li>
            </ul>
          </div>
          
          <div className="practice-category">
            <h4>通信</h4>
            <ul>
              <li>HTTPS/TLSの使用</li>
              <li>適切なCookie設定</li>
              <li>CORS設定</li>
            </ul>
          </div>
          
          <div className="practice-category">
            <h4>監視</h4>
            <ul>
              <li>ログ記録と監視</li>
              <li>異常検知システム</li>
              <li>定期的なセキュリティ監査</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDemo;